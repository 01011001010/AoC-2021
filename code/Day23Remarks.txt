A totally inefficient bruteforce, that searches the tree of possible routes in depth. It's important that this happens with a stack, not queue,
otherwise the memory runs out and time to find a first solution is astronomical. After it's found a solution, all branches that are more expensive
get terminated as soon as their cost reaches the benchmark. The part 1 took 5 minutes to reach the optimal solution for my input, but it would
meed much more to verify and search the rest of possible branches. The time it takses to abandon all hopes and terminate the search for a better
result can be adjusted by changing the timeToEndAndAssumeOptimum variable.
